#!/usr/bin/python3
 
from os import * 
from mappings import * 



def get_playbacks():
    driver      = popen("pactl list sink-inputs | grep Driver").read().split("\n")
    playbackid  =  popen("pactl list sink-inputs | grep 'Sink Input '").read().split("\n")
    apps    =  popen("pactl list sink-inputs | grep application.process.binary").read().split("\n")
    c_sink = popen("pactl list sink-inputs | grep 'Sink: '").read().split("\n")
        
    
    n_playback = len(driver)
    playbacks = []
    app_count = 0 
    
    for playback in range(n_playback-1):
        driver_name = driver[playback].split(":")[1].strip()
        _id  = playbackid[playback].split()[2].strip("#")
        in_use = c_sink[playback].split(":")[1].strip()
        
        if driver_name != "module-loopback.c":
            app_name = apps[app_count].split('=')[1].strip().strip('"')
            playbacks.append((_id , app_name , in_use))
            app_count += 1 

    return playbacks


def get_recording_streams():
    
    driver      = popen("pactl list   source-outputs | grep Driver").read().split("\n")
    apps = popen("pactl list source-outputs | grep application.process.binary").read().split("\n")
    recordingid  =  popen("pactl list source-outputs | grep 'Source Output '").read().split("\n")
    c_source = popen("pactl list source-outputs | grep 'Source: '").read().split("\n")
    apps.remove('')
    n_recording = len(driver)
    recording_streams = []
    app_count = 0

    for recording in range(n_recording-1):
        
        driver_name = driver[recording].split(":")[1].strip()
        _id  = recordingid[recording].split()[2].strip("#")
        in_use  = c_source[recording].split(":")[1].strip()

        if driver_name != "module-loopback.c":
            app_name = apps[app_count].split('=')[1].strip().strip('"')
            recording_streams.append((_id , app_name , in_use))
            app_count += 1 
                
    return recording_streams




def start_streaming(src , dest):
    V1 = get_source_id_by_name('V1.monitor')
    V2 = get_sink_id_by_name('V2')

    popen(f'pacmd move-sink-input {src} {V2}')
    popen(f'pacmd move-source-output {dest} {V1}')
        
    


def stop_streaming(devices , src , dest):

	SOURCE , SINK = (devices[0] , devices[1])
	system_source = get_source_id_by_name(SOURCE)
	system_sink   = get_sink_id_by_name(SINK)

	popen(f'pacmd move-sink-input {src} {system_sink}')
	popen(f'pacmd move-source-output {dest} {system_source}')
    
    

def list_streams_status(devices , streams):

    print("Source-Instance-Id  Source-Instance-Binary Destination-Instance-Id Destination-Instance-Name Status")
    SOURCE , SINK = (devices[0] , devices[1])
	
    for stream in streams:
        src  = stream["source"]
        dest = stream["destination"]
        sources , destinations = get_playbacks() , get_recording_streams()
        f1 , f2 = [] , []
        for source in sources :
            if source[1] == src:
                f1.append(source)
                

        for destination in destinations:
            if destination[1] == dest:
                f2.append(destination)


        if f1 == [] or f2 == []:
            print("-----" , src , "-----" , dest , "❌" , sep="\t\t\t")

        for s in f1:
            for d  in f2:
                if (int(s[2]) == int(get_sink_id_by_name(SINK))) and (int(d[2]) == int(get_source_id_by_name(SOURCE))):
                    print(s[0] , s[1] ,  d[0] , d[1] , "✅(Not-Started)" , sep="\t\t\t")
                else:
                    print(s[0] , s[1] , d[0] , d[1] , "✅(Started)" , sep="\t\t\t")
        
def list_dmenu(devices , streams , selection):

    
    SOURCE , SINK = (devices[0] , devices[1])

    output = ""
    for stream in streams:
        src  = stream["source"]
        dest = stream["destination"]
        sources , destinations = get_playbacks() , get_recording_streams()
        f1 , f2 = [] , []
        for source in sources :
            if source[1] == src:
                f1.append(source)
                

        for destination in destinations:
            if destination[1] == dest:
                f2.append(destination)


        
        if f1 == [] or f2 == []:
            output = output + "-----" + " " +  src +  " " + "-----" + " " +  dest + " " +  " ❌" + "\n" 

        
        for s in f1:
            for d  in f2:
                if (int(s[2]) == int(get_sink_id_by_name(SINK))) and (int(d[2]) == int(get_source_id_by_name(SOURCE))):
                    output = output + s[0] + " " +  s[1]  + " " +   d[0]  + " " + d[1]  +   " " + "✅(Not-Started)" + "\n"
                else:
                    output = output + s[0] + " " +  s[1] + " " +  d[0] + " " +  d[1] + " " + "✅(Started)" + "\n" 
    
    
    option = popen(f'echo "{output}" | dmenu -l 5 -p "All Streams:" ').read().split()
    if option[0] != '-----'  and  option[2] != '-----':
        playback , recording = option[0] , option[2]
        if selection == 'on' : 
            start_streaming(playback , recording)
        elif selection == 'off':
            stop_streaming(playback , recording)
    else:
        system('notify-send "Stream not active"')
            


def generate_help():

    help_lines = ['Usage: rstream [OPTION] ... ', 'Stream content everywhere .', 'Example: rstream start <PARAMETERS> ', '', 'Options ', '', '  list                    get complete information of all streams', ' -d on   start dmenu to start a stream' ,   ' -d off   start dmenu to stop a stream' , 'start <stream-source-id> <stream-destination-id>      Start a stream', '  stop  <stream-source-id> <stream-destination-id>      Stop a stream', '  config                  Open Configuration file ']
    for line in help_lines:
        print(line)

def config(filename , editor):
    system(f"{editor} {filename}")
        
            
            
import codecs
if __name__ == '__main__' :

    from sys import argv
    import json
    filename = f"{environ['HOME']}/.config/rstream/.stream_config.json"
    try:
        with codecs.open(filename , 'r')  as stream_file :
            streams = json.load(stream_file)
    except FileNotFoundError as fof:
        print(f"Configuration file not found at {environ['HOME']}/.config/rstream/")
        exit()    
    argument_count = len(argv)
    audio_devs = (streams["system_source"] , streams["system_sink"])
    
    if 1 < argument_count <= 4:
        if argv[1] == "list" :
            list(audio_devs , streams["streams"])
        elif argv[1] == '-d' :
            list_dmenu(audio_devs , streams["streams"] , argv[2])

        elif argv[1] == "start":
            start_streaming(audio_devs , argv[2] , argv[3])
        elif argv[1] == "stop":
            stop_streaming(audio_devs , argv[2] , argv[3])
        elif argv[1] == "help":
            generate_help()
        elif argv[1] == "config":
            config(filename , streams["DEFAULT-EDITOR"])
                       
    else:
        print("Invalid no. of arguments")
    

            
